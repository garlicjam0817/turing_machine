Script started on 2020-03-26 17:58:18-04:00 [TERM="xterm-256color" TTY="/dev/pts/15" COLUMNS="80" LINES="24"]
]0;jjiang40@erdos:~/private/proj2[jjiang40@erdos proj2]$ cat TMC[K.cc


#include "TM.h"

#include <algorithm>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <string>
#include <cstdio>

using namespace std;

istream& operator>>(istream &is, Table_entry& entry)
{
    string s;
    is >> s;
    
    //input the format as in state, char, and direction
    sscanf(s.c_str(), "(%d,%c,%c)", &entry.new_state, &entry.new_char, &entry.direction);
    
    entry.entryInString = s; //store the entry in a format of a string
    
    return is;
}

// output the contents of a Table_entry
ostream& operator<<(ostream &os, const Table_entry& entry)
{
    return os << entry.entryInString;
}

TM::TM(ifstream &ifs)
{
    Table_entry entry;
    string alpha;
    
    ifs >> num_states;
    ifs >> sigma;
    ifs >> gamma;
    blank = gamma[gamma.size() - 1];
    
    state_table.resize(num_states);
    for(int i = 0; i < num_states; i++)
    {
        state_table[i].resize(gamma.size());
        for(unsigned int j = 0; j < gamma.length(); j++)
        {
            ifs >> entry;
            state_table[i][j] = entry;
        }
    }
    
}

void TM::describe()
{
    cout << "Input alphabet sigma: " << sigma << endl;
    cout << "Tape alphabet gamma: " << gamma << endl;
    cout << "Blank = " << blank << endl;
    cout << "Number of states: " << num_states << endl;

    cout << "State Transition Table:" << endl << setw(15);
    
    for(unsigned long int i = 0; i < gamma.length(); i++)
        cout << gamma[i] << "           ";
    
    cout << endl;
    
    for(unsigned int i = 0; i < state_table.size(); i++)
    {
        cout << "State#" << i + 1;
        for(unsigned int j = 0; j < state_table[i].size(); j++)
        {
            cout << "   " << state_table[i][j] << "  ";
        }
        cout << endl;
    }
}

bool TM::trace(string& in_string)
{
    bool accepted = false;  //initalized to false
    bool happened = false;

    cout << "Tracing the string: " << in_string << endl;
    
    vector<char> input(in_string.begin(), in_string.end());
    unsigned long int length = input.size();
    int currentState = 1;
    unsigned int headPosition = 0;
    
    Table_entry transition;
    
    while(currentState != 0 && currentState != -1)
    {
        print_config(currentState, headPosition, input);
        
        char currentChar = input[headPosition];
        
        for(unsigned long int i = 0; i < gamma.length(); i++)
        {
            if(currentChar == gamma[i])
                transition = state_table[currentState - 1][i];
        }
        
        currentState = transition.new_state;
        input[headPosition] = transition.new_char;
        
        if(transition.direction == 'L') //left
            headPosition -= 1;
        else if(transition.direction == 'R') //right
            headPosition += 1;
        
        /* if nothing happened push back the value of blank to handle
          both cases of blanks in m2 and m3  */
        if(headPosition == length && !happened)
        {
            happened = true;
            input.push_back(blank);
        }
    }
    
    if(currentState == 0)
        accepted = true;
    
    return accepted;
}

void TM::print_config(int state, unsigned int pos, vector<char> input)
{
    for(unsigned long int i = 0; i < input.size(); i++)
    {
        if(i == pos)
            cout << "q" << state << " ";
        cout << input[i] << " ";
    }
    cout << endl;
}

]0;jjiang40@erdos:~/private/theory-comp/proj2[jjiang40@erdos proj2]$ make clean
]0;jjiang40@erdos:~/private/theory-comp/proj2[jjiang40@erdos proj2]$ make
g++ -Wall -std=c++17    -c -o proj2.o proj2.cc
g++ -Wall -std=c++17    -c -o TM.o TM.cc
g++ -o proj2 -Wall -std=c++17  proj2.o TM.o
]0;jjiang40@erdos:~/private/proj2[jjiang40@erdos proj2]$ proj2 m2-data
Turing machine definition:
Input alphabet sigma: 0
Tape alphabet gamma: 0x_
Blank = _
Number of states: 5
State Transition Table:
              0           x           _           
State#1   (2,_,R)     (-1,x,R)     (-1,_,R)  
State#2   (3,x,R)     (2,x,R)     (0,_,R)  
State#3   (4,0,R)     (3,x,R)     (5,_,L)  
State#4   (3,x,R)     (4,x,R)     (-1,_,R)  
State#5   (5,0,L)     (5,x,L)     (2,_,R)  

Enter input strings, one line at a time:
? 0
Tracing the string: 0
q1 0 
_ q2 _ 
accept!
? 00
Tracing the string: 00
q1 0 0 
_ q2 0 
_ x q3 _ 
_ q5 x _ 
q5 _ x _ 
_ q2 x _ 
_ x q2 _ 
accept!
? 000
Tracing the string: 000
q1 0 0 0 
_ q2 0 0 
_ x q3 0 
_ x 0 q4 _ 
reject!
? 0000
Tracing the string: 0000
q1 0 0 0 0 
_ q2 0 0 0 
_ x q3 0 0 
_ x 0 q4 0 
_ x 0 x q3 _ 
_ x 0 q5 x _ 
_ x q5 0 x _ 
_ q5 x 0 x _ 
q5 _ x 0 x _ 
_ q2 x 0 x _ 
_ x q2 0 x _ 
_ x x q3 x _ 
_ x x x q3 _ 
_ x x q5 x _ 
_ x q5 x x _ 
_ q5 x x x _ 
q5 _ x x x _ 
_ q2 x x x _ 
_ x q2 x x _ 
_ x x q2 x _ 
_ x x x q2 _ 
accept!
? 00000
Tracing the string: 00000
q1 0 0 0 0 0 
_ q2 0 0 0 0 
_ x q3 0 0 0 
_ x 0 q4 0 0 
_ x 0 x q3 0 
_ x 0 x 0 q4 _ 
reject!
? 000000
Tracing the string: 000000
q1 0 0 0 0 0 0 
_ q2 0 0 0 0 0 
_ x q3 0 0 0 0 
_ x 0 q4 0 0 0 
_ x 0 x q3 0 0 
_ x 0 x 0 q4 0 
_ x 0 x 0 x q3 _ 
_ x 0 x 0 q5 x _ 
_ x 0 x q5 0 x _ 
_ x 0 q5 x 0 x _ 
_ x q5 0 x 0 x _ 
_ q5 x 0 x 0 x _ 
q5 _ x 0 x 0 x _ 
_ q2 x 0 x 0 x _ 
_ x q2 0 x 0 x _ 
_ x x q3 x 0 x _ 
_ x x x q3 0 x _ 
_ x x x 0 q4 x _ 
_ x x x 0 x q4 _ 
reject!
? 0000000
Tracing the string: 0000000
q1 0 0 0 0 0 0 0 
_ q2 0 0 0 0 0 0 
_ x q3 0 0 0 0 0 
_ x 0 q4 0 0 0 0 
_ x 0 x q3 0 0 0 
_ x 0 x 0 q4 0 0 
_ x 0 x 0 x q3 0 
_ x 0 x 0 x 0 q4 _ 
reject!
? 00000000
Tracing the string: 00000000
q1 0 0 0 0 0 0 0 0 
_ q2 0 0 0 0 0 0 0 
_ x q3 0 0 0 0 0 0 
_ x 0 q4 0 0 0 0 0 
_ x 0 x q3 0 0 0 0 
_ x 0 x 0 q4 0 0 0 
_ x 0 x 0 x q3 0 0 
_ x 0 x 0 x 0 q4 0 
_ x 0 x 0 x 0 x q3 _ 
_ x 0 x 0 x 0 q5 x _ 
_ x 0 x 0 x q5 0 x _ 
_ x 0 x 0 q5 x 0 x _ 
_ x 0 x q5 0 x 0 x _ 
_ x 0 q5 x 0 x 0 x _ 
_ x q5 0 x 0 x 0 x _ 
_ q5 x 0 x 0 x 0 x _ 
q5 _ x 0 x 0 x 0 x _ 
_ q2 x 0 x 0 x 0 x _ 
_ x q2 0 x 0 x 0 x _ 
_ x x q3 x 0 x 0 x _ 
_ x x x q3 0 x 0 x _ 
_ x x x 0 q4 x 0 x _ 
_ x x x 0 x q4 0 x _ 
_ x x x 0 x x q3 x _ 
_ x x x 0 x x x q3 _ 
_ x x x 0 x x q5 x _ 
_ x x x 0 x q5 x x _ 
_ x x x 0 q5 x x x _ 
_ x x x q5 0 x x x _ 
_ x x q5 x 0 x x x _ 
_ x q5 x x 0 x x x _ 
_ q5 x x x 0 x x x _ 
q5 _ x x x 0 x x x _ 
_ q2 x x x 0 x x x _ 
_ x q2 x x 0 x x x _ 
_ x x q2 x 0 x x x _ 
_ x x x q2 0 x x x _ 
_ x x x x q3 x x x _ 
_ x x x x x q3 x x _ 
_ x x x x x x q3 x _ 
_ x x x x x x x q3 _ 
_ x x x x x x q5 x _ 
_ x x x x x q5 x x _ 
_ x x x x q5 x x x _ 
_ x x x q5 x x x x _ 
_ x x q5 x x x x x _ 
_ x q5 x x x x x x _ 
_ q5 x x x x x x x _ 
q5 _ x x x x x x x _ 
_ q2 x x x x x x x _ 
_ x q2 x x x x x x _ 
_ x x q2 x x x x x _ 
_ x x x q2 x x x x _ 
_ x x x x q2 x x x _ 
_ x x x x x q2 x x _ 
_ x x x x x x q2 x _ 
_ x x x x x x x q2 _ 
accept!
? ^C
]0;jjiang40@erdos:~/private/proj2[jjiang40@erdos proj2]$ exit
exit

Script done on 2020-03-26 17:58:52-04:00 [COMMAND_EXIT_CODE="130"]
